[{"/home/darkdark/block_projs/Mushroom_Capital/src/index.js":"1","/home/darkdark/block_projs/Mushroom_Capital/src/Mushroom.js":"2","/home/darkdark/block_projs/Mushroom_Capital/src/components/Dashboard.js":"3","/home/darkdark/block_projs/Mushroom_Capital/src/components/Invest.js":"4","/home/darkdark/block_projs/Mushroom_Capital/src/Rome.js":"5","/home/darkdark/block_projs/Mushroom_Capital/src/reportWebVitals.js":"6","/home/darkdark/block_projs/Mushroom_Capital/src/App.js":"7","/home/darkdark/block_projs/Mushroom_Capital/src/components/Liquidate.js":"8","/home/darkdark/block_projs/Mushroom_Capital/src/web3.js":"9"},{"size":500,"mtime":1606445301757,"results":"10","hashOfConfig":"11"},{"size":12199,"mtime":1606445301763,"results":"12","hashOfConfig":"11"},{"size":4469,"mtime":1606445301767,"results":"13","hashOfConfig":"11"},{"size":4009,"mtime":1606445301764,"results":"14","hashOfConfig":"11"},{"size":8349,"mtime":1606445301768,"results":"15","hashOfConfig":"11"},{"size":362,"mtime":1606445301760,"results":"16","hashOfConfig":"11"},{"size":1975,"mtime":1606445301752,"results":"17","hashOfConfig":"11"},{"size":3647,"mtime":1606445301765,"results":"18","hashOfConfig":"11"},{"size":263,"mtime":1606445301769,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1bbmlh1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/darkdark/block_projs/Mushroom_Capital/src/index.js",[],["42","43"],"/home/darkdark/block_projs/Mushroom_Capital/src/Mushroom.js",[],"/home/darkdark/block_projs/Mushroom_Capital/src/components/Dashboard.js",["44","45","46","47","48"],"/home/darkdark/block_projs/Mushroom_Capital/src/components/Invest.js",["49"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n    console.warn(\"balance ballls ballls balls ballllsss\");\r\n}\r\n\r\nclass Invest extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            amount : 0\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    invest = async event =>{\r\n        console.log(\"EYYYYYY\");\r\n\r\n        event.preventDefault();\r\n        try {\r\n            var accounts;\r\n            await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n\r\n            console.log(accounts[0]);\r\n\r\n            //const batch = new web3.eth.BatchRequest();\r\n\r\n            const weiValue = web3.utils.toWei(this.state.amount, 'ether');\r\n\r\n\r\n            /*\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            */\r\n\r\n            /*\r\n            batch.add(Rome.methods.approve(Mushroom.options.address, weiValue).send.request({from: accounts[0]}, callBack));\r\n            batch.add(Mushroom.methods.stake(weiValue).send.request({from: accounts[0]}, callBack));\r\n            */\r\n\r\n            await Rome.methods.approve(Mushroom.options.address, weiValue).send({from: accounts[0]});\r\n            await Mushroom.methods.stake(weiValue).send({from: accounts[0]});\r\n\r\n\r\n            /*\r\n            const params = { to: token.address, data: contractData, from: address };\r\n            batch.add(web3.eth.call.request(params, callBack));\r\n            */\r\n\r\n            /*\r\n            .call(from:accounts[0]))\r\n            batch.add(Mushroom.methods\r\n                .mint(this.state.amount) // contains the user account name\r\n                .send({\r\n                    from: accounts[0]\r\n                }));\r\n\r\n             */\r\n            // batches let you put more than one transaction together to be processed at one\r\n            // need them for approve transfer, then transferfrom when using erc tokens\r\n            //await batch.execute();\r\n\r\n            //await Rome.methods.buyRome(this.state.amount).send({from: accounts[0], value: this.state.amount*10000000000000000, gas: 100000000000000});\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR IN SENDING TO CHAIN \" + err);\r\n            this.setState({\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Card style={{\r\n                    backgroundColor: '#fd00ff'\r\n                }}>\r\n\r\n\r\n                <h4 style={{ color: 'Black', fluid: false }}>Invest USDC</h4 >\r\n                <Form.Field >\r\n                    <input\r\n                        style={{width:'80%'}}\r\n                        placeholder=\"How many USDC tokens would you like to invest?\"\r\n                        onChange={event =>\r\n                            this.setState({\r\n                                amount: event.target.value\r\n                            })\r\n                        }\r\n                    />\r\n                </Form.Field>\r\n                <br/>\r\n                <h4 style={{ color: 'Black', margin: 0, }} align=\"center\">   Tokens will be used for investments and you will get MUSH tokens based on your share of the investment pool. (Approve Both Transactions)</h4>\r\n                    <br/>\r\n\r\n\r\n                <button id={'setLocation'} className={'btn btn-md btn-success'} style={{color:'black'}} onClick={this.invest}>\r\n                    <span>Invest Tokens</span>\r\n                </button>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Invest;\r\n","/home/darkdark/block_projs/Mushroom_Capital/src/Rome.js",[],"/home/darkdark/block_projs/Mushroom_Capital/src/reportWebVitals.js",[],["50","51"],"/home/darkdark/block_projs/Mushroom_Capital/src/App.js",["52","53","54","55","56","57","58"],"/home/darkdark/block_projs/Mushroom_Capital/src/components/Liquidate.js",["59"],"import React, { Component } from \"react\";\r\nimport web3 from \"../web3\"\r\nimport {Card, Form} from \"semantic-ui-react\";\r\nimport Mushroom from \"../Mushroom\";\r\nimport Rome from \"../Rome\";\r\n//import Card from 'react-bootstrap/Card'\r\n//import Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction callBack(err, result) {\r\n    console.warn(result);\r\n    console.warn(\"balance ballls ballls balls ballllsss\");\r\n}\r\n\r\nclass Liquidate extends Component{\r\n\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            amount : 0\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    invest = async event =>{\r\n        console.log(\"EYYYYYY\");\r\n\r\n        event.preventDefault();\r\n        try {\r\n            var accounts;\r\n            await web3.eth.getAccounts().then(function(acc){ accounts = acc })\r\n\r\n            console.log(accounts[0]);\r\n\r\n            const batch = new web3.eth.BatchRequest();\r\n\r\n            const weiValue = web3.utils.toWei(this.state.amount, 'ether');\r\n\r\n            /*\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            batch.add(Rome.methods.buyRome(this.state.amount).send.request({from: accounts[0], value: this.state.amount*10000000000000000}, callBack));\r\n            */\r\n\r\n            batch.add(Mushroom.methods.unstake(weiValue).send.request({from: accounts[0]}, callBack));\r\n\r\n\r\n\r\n            /*\r\n            const params = { to: token.address, data: contractData, from: address };\r\n            batch.add(web3.eth.call.request(params, callBack));\r\n            */\r\n\r\n            /*\r\n            .call(from:accounts[0]))\r\n            batch.add(Mushroom.methods\r\n                .mint(this.state.amount) // contains the user account name\r\n                .send({\r\n                    from: accounts[0]\r\n                }));\r\n\r\n             */\r\n            // batches let you put more than one transaction together to be processed at one\r\n            // need them for approve transfer, then transferfrom when using erc tokens\r\n            await batch.execute();\r\n\r\n            //await Rome.methods.buyRome(this.state.amount).send({from: accounts[0], value: this.state.amount*10000000000000000, gas: 100000000000000});\r\n\r\n        } catch (err) {\r\n            console.log(\"ERROR IN SENDING TO CHAIN \" + err);\r\n            this.setState({\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Card style={{\r\n                    backgroundColor: '#fd00ff'\r\n                }}>\r\n\r\n\r\n                <h4 style={{ color: 'Black', fluid: false }}>Remove Funds</h4 >\r\n                <Form.Field >\r\n                    <input\r\n                        style={{width:'80%'}}\r\n                        placeholder=\"How many Mushroom tokens would you like to exchange?\"\r\n                        onChange={event =>\r\n                            this.setState({\r\n                                amount: event.target.value\r\n                            })\r\n                        }\r\n                    />\r\n                </Form.Field>\r\n                <br/>\r\n                <h4 style={{ color: 'Black', margin: 0  }}>   Your mushrooms will be BURNED and you will receive an equivalent stake of the pool if funds are available, and not currently tied up in investments.</h4>\r\n                    <button id={'setLocation'} className={'btn btn-md btn-success'} style={{color:'black'}} onClick={this.invest}>\r\n                    <span>Remove Funds</span>\r\n                </button>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n};\r\nexport default Liquidate;\r\n","/home/darkdark/block_projs/Mushroom_Capital/src/web3.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":9,"nodeType":"66","messageId":"67","endLine":3,"endColumn":13},{"ruleId":"64","severity":1,"message":"68","line":3,"column":15,"nodeType":"66","messageId":"67","endLine":3,"endColumn":19},{"ruleId":"64","severity":1,"message":"69","line":8,"column":8,"nodeType":"66","messageId":"67","endLine":8,"endColumn":14},{"ruleId":"64","severity":1,"message":"70","line":9,"column":8,"nodeType":"66","messageId":"67","endLine":9,"endColumn":17},{"ruleId":"64","severity":1,"message":"71","line":15,"column":10,"nodeType":"66","messageId":"67","endLine":15,"endColumn":18},{"ruleId":"64","severity":1,"message":"71","line":10,"column":10,"nodeType":"66","messageId":"67","endLine":10,"endColumn":18},{"ruleId":"60","replacedBy":"72"},{"ruleId":"62","replacedBy":"73"},{"ruleId":"64","severity":1,"message":"74","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":12},{"ruleId":"64","severity":1,"message":"75","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":12},{"ruleId":"64","severity":1,"message":"65","line":10,"column":9,"nodeType":"66","messageId":"67","endLine":10,"endColumn":13},{"ruleId":"64","severity":1,"message":"68","line":10,"column":15,"nodeType":"66","messageId":"67","endLine":10,"endColumn":19},{"ruleId":"64","severity":1,"message":"76","line":11,"column":16,"nodeType":"66","messageId":"67","endLine":11,"endColumn":20},{"ruleId":"77","severity":1,"message":"78","line":22,"column":33,"nodeType":"79","messageId":"80","endLine":22,"endColumn":34},{"ruleId":"77","severity":1,"message":"78","line":22,"column":84,"nodeType":"79","messageId":"80","endLine":22,"endColumn":85},{"ruleId":"64","severity":1,"message":"81","line":5,"column":8,"nodeType":"66","messageId":"67","endLine":5,"endColumn":12},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Invest' is defined but never used.","'Liquidate' is defined but never used.","'callBack' is defined but never used.",["82"],["83"],"'logo' is defined but never used.","'web3' is defined but never used.","'Text' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Rome' is defined but never used.","no-global-assign","no-unsafe-negation"]